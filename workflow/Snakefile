import numpy as np


configfile: "config/config.yaml"


Ls = config["L"]
zs = config["z"]
vs = config["v"]
Ns = config["N"]
ys = config["y"]
betas = config["beta"]
numGens = config["numGen"]
random_seed = config["random_seed"]
num_rep = config["num_rep"]

rng = np.random.default_rng(int(random_seed))
seed_array = rng.choice(10 * num_rep, size=num_rep, replace=False)

# Generate random seeds here based on number of replicates argument in config
# config of random_seeds and num_replicates
# Use random_seeds config to generate numpy random generator

sim_results_pattern = (
    "sim_L{L}_z{z}_v{v}_N{N}_y{y}_beta{beta}_numGen{numGen}_seed{seed}"
)

sim_results_block_number = expand(
    "output/" + sim_results_pattern + "_block_number.png",
    L=Ls,
    z=zs,
    v=vs,
    N=Ns,
    y=ys,
    beta=betas,
    numGen=numGens,
    seed=seed_array,
)

sim_results_block_length = expand(
    "output/" + sim_results_pattern + "_block_length.png",
    L=Ls,
    z=zs,
    v=vs,
    N=Ns,
    y=ys,
    beta=betas,
    numGen=numGens,
    seed=seed_array,
)

sim_results_total_length = expand(
    "output/" + sim_results_pattern + "_total_length.png",
    L=Ls,
    z=zs,
    v=vs,
    N=Ns,
    y=ys,
    beta=betas,
    numGen=numGens,
    seed=seed_array,
)

sim_results_trait = expand(
    "output/" + sim_results_pattern + "_average_trait.png",
    L=Ls,
    z=zs,
    v=vs,
    N=Ns,
    y=ys,
    beta=betas,
    numGen=numGens,
    seed=seed_array,
)


rule all:
    input:
        sim_results_block_number,
        sim_results_block_length,
        sim_results_total_length,
        sim_results_trait,


rule sim_slim:
    output:
        "output/tmp/" + sim_results_pattern + ".trees",
    conda:
        "envs/slim.yaml"
    shell:
        (
            "slim -d L={wildcards.L} -d z={wildcards.z} -d v={wildcards.v} "
            + "-d N={wildcards.N} -d y={wildcards.y} "
            + "-d beta={wildcards.beta} -d numGen={wildcards.numGen} "
            + "-d seed={wildcards.seed} "
            + "-d 'filename=\"{output}\"' workflow/scripts/sim_introgression.slim"
        )


rule process_tree:
    input:
        "output/tmp/" + sim_results_pattern + ".trees",
    output:
        "output/tmp/" + sim_results_pattern + "_ibd_segment.csv",
    params:
        N=lambda wildcards: wildcards.N,
    conda:
        "envs/analysis.yaml"
    script:
        "scripts/process_tree.py"


rule trait:
    input:
        "output/tmp/" + sim_results_pattern + ".trees",
    output:
        "output/tmp/" + sim_results_pattern + "_trait.csv",
    params:
        N=lambda wildcards: wildcards.N,
    conda:
        "envs/analysis.yaml"
    script:
        "scripts/trait.py"


rule plot_ibd:
    input:
        "output/tmp/" + sim_results_pattern + "_ibd_segment.csv",
    output:
        block_number="output/" + sim_results_pattern + "_block_number.png",
        block_length="output/" + sim_results_pattern + "_block_length.png",
        total_length="output/" + sim_results_pattern + "_total_length.png",
    conda:
        "envs/analysis.yaml"
    script:
        "scripts/plot_block.py"


rule plot_trait:
    input:
        "output/tmp/" + sim_results_pattern + "_trait.csv",
    output:
        "output/" + sim_results_pattern + "_average_trait.png",
    conda:
        "envs/analysis.yaml"
    script:
        "scripts/plot_trait.py"
