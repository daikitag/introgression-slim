import numpy as np
import numbers


configfile: "config/config.yaml"


Ls = config["L"]
zs = config["z"]
vs = config["v"]
Ns = config["N"]
ys = config["y"]
betas = config["beta"]
numGens = config["numGen"]
random_seed = config["random_seed"]
num_rep = config["num_rep"]

if isinstance(random_seed, numbers.Number):
    seed = int(random_seed)
else:
    seed = None

rng = np.random.default_rng(seed)
seed_array = rng.choice(2**32 - 1, size=num_rep, replace=False)

folder_pattern = (
    "output/sim_L{L}_z{z}_v{v}_N{N}_y{y}_beta{beta}_numGen{numGen}_randomseed"
    + str(random_seed)
    + "/"
)

sim_results_pattern = (
    "sim_L{L}_z{z}_v{v}_N{N}_y{y}_beta{beta}_numGen{numGen}_seed{seed}"
)

sim_results_plot = expand(
    f"{folder_pattern}{sim_results_pattern}_plot.png",
    L=Ls,
    z=zs,
    v=vs,
    N=Ns,
    y=ys,
    beta=betas,
    numGen=numGens,
    seed=seed_array,
)

sim_results_slim = expand(
    f"{folder_pattern}{sim_results_pattern} _slim_simulation.txt",
    L=Ls,
    z=zs,
    v=vs,
    N=Ns,
    y=ys,
    beta=betas,
    numGen=numGens,
    seed=seed_array,
)


rule all:
    input:
        sim_results_plot,
        sim_results_slim,


rule sim_slim:
    output:
        tree_filename=f"output/tmp/{sim_results_pattern}.trees",
        text_filename=f"{folder_pattern}{sim_results_pattern}_slim_simulation.txt",
    log:
        f"logs/slim/{sim_results_pattern}.log",
    conda:
        "envs/slim.yaml"
    shell:
        (
            "slim -d L={wildcards.L} -d z={wildcards.z} -d v={wildcards.v} "
            + "-d N={wildcards.N} -d y={wildcards.y} "
            + "-d beta={wildcards.beta} -d numGen={wildcards.numGen} "
            + "-d seed={wildcards.seed} "
            + "-d 'tree_filename=\"{output.tree_filename}\"' "
            + "-d 'text_filename=\"{output.text_filename}\"' workflow/scripts/sim_introgression.slim"
        )


rule process_tree:
    input:
        f"output/tmp/{sim_results_pattern}.trees",
    output:
        f"output/tmp/{sim_results_pattern}_ibd_segment.csv",
    log:
        f"logs/process_tree/{sim_results_pattern}.log",
    params:
        N=lambda wildcards: wildcards.N,
    conda:
        "envs/analysis.yaml"
    script:
        "scripts/process_tree.py"


rule trait:
    input:
        f"output/tmp/{sim_results_pattern}.trees",
    output:
        f"output/tmp/{sim_results_pattern}_trait.csv",
    log:
        f"logs/trait/{sim_results_pattern}.log",
    params:
        N=lambda wildcards: wildcards.N,
    conda:
        "envs/analysis.yaml"
    script:
        "scripts/trait.py"


rule plot_results:
    input:
        trait_df=f"output/tmp/{sim_results_pattern}_trait.csv",
        ibd_df=f"output/tmp/{sim_results_pattern}_ibd_segment.csv",
    output:
        f"{folder_pattern}{sim_results_pattern}_plot.png",
    log:
        f"logs/plot/{sim_results_pattern}.log",
    conda:
        "envs/analysis.yaml"
    script:
        "scripts/plot_results.py"
