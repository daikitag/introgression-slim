// set up a simple neutral simulation
initialize() {
	setSeed(seed);
	initializeTreeSeq();
	initializeMutationRate(0.0);
	
	// m1 distribution won't matter, as we are manually selecting
	// the selection coefficient
	// Dominance coefficient h makes the fitness effect as 1+hs
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	m1.convertToSubstitution = F;
	
	// Color just for SLiM gui
	m1.color = "red";
	
	initializeGenomicElement(g1, 0, L);
	// Recombination will be set by using recombination()
	// to model single crossover
	initializeRecombinationRate(y);

}
// Set mutation effect of m1 as 1 (neutral), because we want
// to manually determine the selection
mutationEffect(m1) { return 1.0; }

1 early() {
	// create a population of N individuals
	sim.addSubpop("p1", N);
	// add mutations to a single genome
	genome = p1.individuals[0].genome1;
	for (k in seqLen(L)) {
		sd = sqrt(v*y/L);
		S = rnorm(n=1, mean=z/L, sd=sd);
		genome.addNewMutation(m1, selectionCoeff=S, position=k);
	}
}

1: late() {
	inds = p1.individuals;
	phenotypes = inds.sumOfMutationsOfType(m1);
	inds.fitnessScaling = exp(beta * phenotypes);
	focal = (inds.countOfMutationsOfType(m1) > 0);
	sim.treeSeqRememberIndividuals(inds[focal]);
}

// Record for 100 generations
numGen late() {
	sim.treeSeqOutput(filename);
}
